name: Tauri Android Build

on:
  push:
    branches:
      - main  # Set this to your default branch
  pull_request:
    branches:
      - main  # Set this to your default branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Set the Node.js version you are using

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install pnpm
        run: |
          npm install -g pnpm@latest

      - name: Install Dependencies
        run: |
          # npm install
          # If you're using pnpm instead of npm, uncomment the following line:
          pnpm install

      - name: Set up NDK
        run: |
          # Download and extract the NDK
          wget https://dl.google.com/android/repository/android-ndk-r25b-linux.zip -O ndk.zip
          unzip ndk.zip -d "$ANDROID_SDK_ROOT"
          # Set the NDK_HOME environment variable
          NDK_HOME="$ANDROID_SDK_ROOT/android-ndk-r25b"
          echo "NDK_HOME=$NDK_HOME" >>$GITHUB_ENV

      - name: Install Rust Target
        run: rustup target add aarch64-linux-android

      - name: Clean Cargo Cache
        run: |
          cd src-tauri  # Navigate to the directory containing Cargo.toml
          cargo clean

      - name: Update libc dependency
        run: |
          cd src-tauri  # Navigate to the directory containing Cargo.toml
          cargo update -p libc

      - name: Install Android SDK
        run: |
          sudo apt-get update
          # Install Android SDK
          wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O android-sdk.zip
          unzip android-sdk.zip
          ANDROID_SDK_ROOT="/usr/local/lib/android/sdk"
          # Use sudo to ensure we have permission to create the directory
          sudo mkdir -p "$ANDROID_SDK_ROOT"
          # Unzip cmdline-tools to a specific directory
          unzip android-sdk.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          # Set the correct path to the sdkmanager
          SDK_MANAGER_PATH="$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools/bin"
          # Add sdkmanager to PATH
          export PATH=$PATH:"$SDK_MANAGER_PATH"
          # Accept licenses
          yes | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses > /dev/null
          # Install necessary SDK components
          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-31" "build-tools;31.0.0" > /dev/null
          # Add Android SDK tools to PATH for later steps
          echo "$ANDROID_SDK_ROOT/platform-tools" >>$GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/build-tools/31.0.0" >>$GITHUB_PATH

      - name: Create Gradle Directory
        run: mkdir -p src-tauri/gen/android

      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: adoptopenjdk


      - name: Set JAVA_HOME
        run: echo "JAVA_HOME=/home/runner/java-17" >> $GITHUB_ENV

      - name: Build Android App
        run: |
          # npm run tauri:build
          # If you're using pnpm instead of npm, uncomment the following line:
          pnpm run android:build

      - name: Build Android App
        run: ./gradlew build --reinstall-all

      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store/v3
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-


      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: src-tauri/target/release/bundle/android/app/build/outputs/apk/release/*.apk
